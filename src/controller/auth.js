import bcrypt from "bcrypt";
import User from "../models/User.js";
import { generateToken } from "../utils/auth.js";

const SALT_ROUNDS = 10;

export const signup = async (req, res) => {
	try {
		const userData = req.body;

		const hashedPassword = await bcrypt.hash(userData.password, SALT_ROUNDS);

		const user = new User({
			...userData,
			password: hashedPassword
		});

		await user.save();

		res.status(201).json({
			success: true,
			user: {
				_id: user._id,
				email: user.email
			}
		});

	} catch (err) {
		res.status(500).json({ error: err.message });
	}
};

export const login = async (req, res) => {
	try {
		const { email, password } = req.body;

		const user = await User.findOne({ email });
		if (!user) {
			return res.status(401).json({ error: "Invalid credentials" });
		}

		const isMatch = await bcrypt.compare(password, user.password);
		if (!isMatch) {
			return res.status(401).json({ error: "Invalid credentials" });
		}

		res.status(200).json({
			access_token: generateToken(user)
		});

	} catch (err) {
		res.status(500).json({ error: err.message });
	}
};

export const getToken = async (req, res) => {
	try {
		const token = {
			access: "token generated by jwt!!!"
		};
		res.json(token);
	} catch (err) {
		res.status(500).json({ error: err.message });
	}
};

